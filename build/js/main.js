"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var cells = document.querySelectorAll('.cell');
var statusText = document.getElementById('status');
var statusTextInfo = document.getElementById('status-text');
var statusContainer = document.querySelector(".land__left");
var statusBox = document.querySelector(".land__status");
var restartBtn = document.getElementById('restart');
var overlay = document.querySelector(".overlay");
var sideBtns = document.querySelectorAll('.side-btn');
var startGame = document.querySelector('.start-game');
var gameContainer = document.getElementById('game');
var landWrapper = document.querySelector('.land');
var statusIconX = document.querySelector('[data-player="X"]');
var statusIconO = document.querySelector('[data-player="O"]');
var board = ['', '', '', '', '', '', '', '', ''];
var isComputerX = true; // Чередує роль комп'ютера між X та O
var currentPlayer, computerPlayer;
if (isComputerX) {
  document.querySelector('[data-side="X"]').classList.remove('_active');
  document.querySelector('[data-side="0"]').classList.add('_active');
} else {
  document.querySelector('[data-side="0"]').classList.remove('_active');
  document.querySelector('[data-side="X"]').classList.add('_active');
}
var winningCombos = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];
function initializeGame() {
  currentPlayer = isComputerX ? 'Гравець 02' : 'Гравець 01';
  computerPlayer = isComputerX ? 'Гравець 01' : 'Гравець 02';
  board = ['', '', '', '', '', '', '', '', ''];
  cells.forEach(function (cell) {
    cell.textContent = '';
    cell.classList.remove('taken');
  });
  checkStatusIcon(currentPlayer);
  checkStatusContainer(currentPlayer);
  statusText.textContent = "".concat(currentPlayer);
  statusTextInfo.textContent = "\u0422\u0412\u0406\u0419_\u0425\u0406\u0414";
  if (currentPlayer === computerPlayer) {
    setTimeout(bestMove, 500);
  }
}
function checkStatusIcon(player) {
  console.log(player);
  if (player === 'Гравець 01') {
    statusIconX.classList.add("_active");
    statusIconO.classList.remove("_active");
  }
  if (player === 'Гравець 02') {
    statusIconO.classList.add("_active");
    statusIconX.classList.remove("_active");
  }
}
function checkStatusContainer(player) {
  console.log(player);
  if (player === 'Гравець 01') {
    statusBox.classList.add("X-player");
    statusBox.classList.remove("O-player");
  }
  if (player === 'Гравець 02') {
    statusBox.classList.add("O-player");
    statusBox.classList.remove("X-player");
  }
}
function checkWinner(player) {
  var _iterator = _createForOfIteratorHelper(winningCombos),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var combo = _step.value;
      if (combo.every(function (index) {
        return board[index] === player;
      })) {
        return combo;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return null;
}

// function checkWinner(player) {
//     return winningCombos.some(combo =>
//         combo.every(index => board[index] === player)
//     );
// }

function isDraw() {
  return board.every(function (cell) {
    return cell !== '';
  });
}
function bestMove() {
  setTimeout(function () {
    var bestScore = -Infinity;
    var move;
    for (var i = 0; i < board.length; i++) {
      if (board[i] === '') {
        board[i] = computerPlayer;
        var score = minimax(board, 0, false);
        board[i] = '';
        if (score > bestScore) {
          bestScore = score;
          move = i;
        }
      }
    }
    board[move] = computerPlayer;

    // cells[move].classList.add('taken');

    if (computerPlayer === "Гравець 02") {
      cells[move].classList.add('O-player');
    }
    if (computerPlayer === "Гравець 01") {
      cells[move].classList.add('X-player');
    }
    checkStatusIcon(computerPlayer);
    checkStatusContainer(currentPlayer);
    statusTextInfo.textContent = "\u0427\u0415\u041A\u0410\u0419";

    // cells[move].textContent = computerPlayer;
    cells[move].classList.add('taken');
    if (checkWinner(computerPlayer)) {
      statusText.textContent = "".concat(computerPlayer);
      showPopup("._lose");
      endGame();
    } else if (isDraw()) {
      showPopup("._draw");
      statusText.textContent = "Нічия!";
    } else {
      setTimeout(function () {
        currentPlayer = currentPlayer === 'Гравець 01' ? 'Гравець 02' : 'Гравець 01';
        checkStatusIcon(currentPlayer);
        checkStatusContainer(currentPlayer);
        statusTextInfo.textContent = "\u0422\u0412\u0406\u0419_\u0425\u0406\u0414";
        statusText.textContent = "".concat(currentPlayer);
      }, 1500);
    }
  }, 1000);
}
function minimax(board, depth, isMaximizing) {
  if (checkWinner(computerPlayer)) return 10 - depth; // Комп'ютер виграв
  if (checkWinner(currentPlayer)) return depth - 10; // Гравець виграв
  if (isDraw()) return 0; // Нічия

  if (isMaximizing) {
    var bestScore = -Infinity;
    for (var i = 0; i < board.length; i++) {
      if (board[i] === '') {
        board[i] = computerPlayer;
        var score = minimax(board, depth + 1, false);
        board[i] = '';
        bestScore = Math.max(score, bestScore);
      }
    }
    return bestScore;
  } else {
    var _bestScore = Infinity;
    for (var _i = 0; _i < board.length; _i++) {
      if (board[_i] === '') {
        board[_i] = currentPlayer;
        var _score = minimax(board, depth + 1, true);
        board[_i] = '';
        _bestScore = Math.min(_score, _bestScore);
      }
    }
    return _bestScore;
  }
}
function handleCellClick(e) {
  var cell = e.target;
  var index = cell.dataset.index;
  if (board[index] === '' && currentPlayer !== computerPlayer) {
    board[index] = currentPlayer;
    console.log(currentPlayer);
    if (currentPlayer === "Гравець 02") {
      cell.classList.add('O-player');
    }
    if (currentPlayer === "Гравець 01") {
      cell.classList.add('X-player');
    }

    // cell.textContent = currentPlayer;
    cell.classList.add('taken');
    if (checkWinner(currentPlayer)) {
      setTimeout(function () {
        statusText.textContent = "".concat(currentPlayer);
        showPopup("._win");
        endGame();
      }, 2000);
    } else if (isDraw()) {
      setTimeout(function () {
        showPopup("._draw");
        statusText.textContent = "Нічия!";
      }, 2000);
    } else {
      currentPlayer = computerPlayer;
      statusText.textContent = "".concat(computerPlayer);
      setTimeout(bestMove, 500);
    }
  }
}
function endGame() {
  cells.forEach(function (cell) {
    return cell.classList.add('taken');
  });
}
restartBtn.addEventListener('click', function () {
  isComputerX = !isComputerX; // Чередуємо ролі
  initializeGame();
});
cells.forEach(function (cell) {
  return cell.addEventListener('click', handleCellClick);
});
sideBtns.forEach(function (btn) {
  btn.addEventListener('click', function () {
    var side = btn.dataset.side;
    isComputerX = side !== 'X'; // Якщо гравець X, комп'ютер буде O
    sideBtns.forEach(function (item) {
      return item.classList.remove('_active');
    });
    btn.classList.add('_active');
  });
});
startGame.addEventListener('click', function () {
  document.getElementById('side-selection').style.opacity = '0';
  gameContainer.style.opacity = '1';
  restartBtn.style.display = '';
  landWrapper.classList.add("_decor");
  setTimeout(function () {
    enableMouseScale(document.querySelector('.decor'));
  }, 2500);
  initializeGame();
  hidePopup("#side-selection");
});
function showPopup(popup) {
  console.log(popup);
  popup = overlay.querySelector(popup);
  overlay.classList.remove("opacity");
  popup.classList.remove("hide");
}
function hidePopup(popup) {
  popup = overlay.querySelector(popup);
  overlay.classList.add("opacity");
  popup.classList.add("hide");
}
function enableMouseScale(element) {
  var minScale = 1;
  var maxScale = 1.05;
  element.style.transition = 'transform 0.1s ease';
  document.addEventListener('mousemove', function (e) {
    var rect = element.getBoundingClientRect();
    var x = e.clientX - rect.left;
    var y = e.clientY - rect.top;
    var centerX = rect.width / 2;
    var centerY = rect.height / 2;
    var distance = Math.hypot(x - centerX, y - centerY);
    var maxDistance = Math.hypot(centerX, centerY);
    var scale = minScale + (1 - distance / maxDistance) * (maxScale - minScale);
    element.style.transform = "scale(".concat(Math.min(maxScale, Math.max(minScale, scale)), ")");
  });
  element.addEventListener('mouseleave', function () {
    element.style.transform = "scale(".concat(minScale, ")");
  });
}
function showWinLine(combo) {
  var line = document.querySelector('.win-line');
  line.style.transform = 'scaleX(0)'; // Reset before new line
  line.style.width = '100%';
  line.style.height = '4px';
  line.style.background = '#00f0ff';

  // Клітинки мають індекси від 0 до 8:
  // 0 | 1 | 2
  // 3 | 4 | 5
  // 6 | 7 | 8

  var positions = {
    '0,1,2': {
      top: '16.66%',
      left: '50%',
      rotate: '0deg'
    },
    '3,4,5': {
      top: '50%',
      left: '50%',
      rotate: '0deg'
    },
    '6,7,8': {
      top: '83.33%',
      left: '50%',
      rotate: '0deg'
    },
    '0,3,6': {
      top: '50%',
      left: '16.66%',
      rotate: '90deg'
    },
    '1,4,7': {
      top: '50%',
      left: '50%',
      rotate: '90deg'
    },
    '2,5,8': {
      top: '50%',
      left: '83.33%',
      rotate: '90deg'
    },
    '0,4,8': {
      top: '50%',
      left: '50%',
      rotate: '45deg'
    },
    '2,4,6': {
      top: '50%',
      left: '50%',
      rotate: '-45deg'
    }
  };
  var key = combo.sort(function (a, b) {
    return a - b;
  }).join(',');
  var pos = positions[key];
  if (pos) {
    line.style.top = pos.top;
    line.style.left = pos.left;
    line.style.transform = "translate(-50%, -50%) rotate(".concat(pos.rotate, ") scaleX(1)");
  }
}

// test
var testPopupButtons = document.querySelectorAll('.test-popup');
testPopupButtons.forEach(function (button) {
  button.addEventListener('click', function () {
    var popupClass = button.dataset.popup;
    var popup = overlay.querySelector(popupClass);
    var allPopups = overlay.querySelectorAll('.popup');
    var isAlreadyOpen = !popup.classList.contains('hide');
    if (isAlreadyOpen) {
      overlay.classList.add('opacity');
      popup.classList.add('hide');
    } else {
      allPopups.forEach(function (p) {
        return p.classList.add('hide');
      });
      overlay.classList.remove('opacity');
      popup.classList.remove('hide');
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
