"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var cells = document.querySelectorAll('.cell');
var statusText = document.getElementById('status');
var statusTextInfo = document.getElementById('status-text');
var statusContainer = document.querySelector(".land__left");
var statusBox = document.querySelector(".land__status");
var restartBtn = document.getElementById('restart');
var overlay = document.querySelector(".overlay");
var sideBtns = document.querySelectorAll('.side-btn');
var startGame = document.querySelector('.start-game');
var gameContainer = document.getElementById('game');
var landWrapper = document.querySelector('.land');
var statusIconX = document.querySelector('[data-player="X"]');
var statusIconO = document.querySelector('[data-player="O"]');
var gameGrid = document.querySelector('.game-grid');
var persLeft = document.querySelector('.game-pers._left');
var persRight = document.querySelector('.game-pers._right');
var board = ['', '', '', '', '', '', '', '', ''];
var isComputerX = true;
var currentPlayer, computerPlayer;
if (isComputerX) {
  document.querySelector('[data-side="X"]').classList.remove('_active');
  document.querySelector('[data-side="0"]').classList.add('_active');
} else {
  document.querySelector('[data-side="0"]').classList.remove('_active');
  document.querySelector('[data-side="X"]').classList.add('_active');
}
var winningCombos = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];
function initializeGame() {
  currentPlayer = isComputerX ? 'Гравець 02' : 'Гравець 01';
  computerPlayer = isComputerX ? 'Гравець 01' : 'Гравець 02';
  board = ['', '', '', '', '', '', '', '', ''];
  cells.forEach(function (cell) {
    cell.textContent = '';
    cell.classList.remove('taken', 'X-player', 'O-player');
  });
  var line = document.querySelector('.win-line');
  if (line) {
    line.style.transform = 'scaleX(0)';
  }
  checkStatusIcon(currentPlayer);
  checkStatusContainer(currentPlayer);
  statusText.textContent = "".concat(currentPlayer);
  statusTextInfo.textContent = "\u0422\u0412\u0406\u0419_\u0425\u0406\u0414";
  if (currentPlayer === computerPlayer) {
    setTimeout(bestMove, 500);
  }
}
function checkStatusIcon(player) {
  if (player === 'Гравець 01') {
    statusIconX.classList.add("_active");
    statusIconO.classList.remove("_active");
  }
  if (player === 'Гравець 02') {
    statusIconO.classList.add("_active");
    statusIconX.classList.remove("_active");
  }
}
function checkStatusContainer(player) {
  if (player === 'Гравець 01') {
    statusBox.classList.add("X-player");
    statusBox.classList.remove("O-player");
  }
  if (player === 'Гравець 02') {
    statusBox.classList.add("O-player");
    statusBox.classList.remove("X-player");
  }
}
function checkWinner(player) {
  var _iterator = _createForOfIteratorHelper(winningCombos),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var combo = _step.value;
      if (combo.every(function (index) {
        return board[index] === player;
      })) {
        return combo;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return null;
}
function isDraw() {
  return board.every(function (cell) {
    return cell !== '';
  });
}
function bestMove() {
  setTimeout(function () {
    var bestScore = -Infinity;
    var move;
    for (var i = 0; i < board.length; i++) {
      if (board[i] === '') {
        board[i] = computerPlayer;
        var score = minimax(board, 0, false);
        board[i] = '';
        if (score > bestScore) {
          bestScore = score;
          move = i;
        }
      }
    }
    board[move] = computerPlayer;
    if (computerPlayer === "Гравець 02") {
      cells[move].classList.add('O-player');
    }
    if (computerPlayer === "Гравець 01") {
      cells[move].classList.add('X-player');
    }
    checkStatusIcon(computerPlayer);
    checkStatusContainer(currentPlayer);
    statusTextInfo.textContent = "\u0427\u0415\u041A\u0410\u0419";
    cells[move].classList.add('taken');
    var winningCombo = checkWinner(computerPlayer);
    if (winningCombo) {
      showWinLine(winningCombo);
      statusText.textContent = "".concat(computerPlayer);
      showPopup("._lose");
      endGame();
    } else if (isDraw()) {
      showPopup("._draw");
      statusText.textContent = "Нічия!";
    } else {
      setTimeout(function () {
        currentPlayer = currentPlayer === 'Гравець 01' ? 'Гравець 02' : 'Гравець 01';
        checkStatusIcon(currentPlayer);
        checkStatusContainer(currentPlayer);
        statusTextInfo.textContent = "\u0422\u0412\u0406\u0419_\u0425\u0406\u0414";
        statusText.textContent = "".concat(currentPlayer);
      }, 1500);
    }
  }, 1000);
}
function minimax(board, depth, isMaximizing) {
  if (checkWinner(computerPlayer)) return 10 - depth;
  if (checkWinner(currentPlayer)) return depth - 10;
  if (isDraw()) return 0;
  if (isMaximizing) {
    var bestScore = -Infinity;
    for (var i = 0; i < board.length; i++) {
      if (board[i] === '') {
        board[i] = computerPlayer;
        var score = minimax(board, depth + 1, false);
        board[i] = '';
        bestScore = Math.max(score, bestScore);
      }
    }
    return bestScore;
  } else {
    var _bestScore = Infinity;
    for (var _i = 0; _i < board.length; _i++) {
      if (board[_i] === '') {
        board[_i] = currentPlayer;
        var _score = minimax(board, depth + 1, true);
        board[_i] = '';
        _bestScore = Math.min(_score, _bestScore);
      }
    }
    return _bestScore;
  }
}
function handleCellClick(e) {
  var cell = e.target;
  var index = cell.dataset.index;
  if (board[index] === '' && currentPlayer !== computerPlayer) {
    board[index] = currentPlayer;
    if (currentPlayer === "Гравець 02") {
      cell.classList.add('O-player');
    }
    if (currentPlayer === "Гравець 01") {
      cell.classList.add('X-player');
    }
    cell.classList.add('taken');
    var winningCombo = checkWinner(currentPlayer);
    if (winningCombo) {
      showWinLine(winningCombo);
      setTimeout(function () {
        statusText.textContent = "".concat(currentPlayer);
        hideAfterGame();
        // showPopup("._win");
        endGame();
      }, 2000);
    } else if (isDraw()) {
      setTimeout(function () {
        hideAfterGame();
        // showPopup("._draw");
        statusText.textContent = "Нічия!";
      }, 2000);
    } else {
      currentPlayer = computerPlayer;
      statusText.textContent = "".concat(computerPlayer);
      setTimeout(bestMove, 500);
    }
  }
}
function hideAfterGame() {
  gameContainer.style.opacity = "0";
  gameGrid.style.opacity = "0";
  statusBox.classList.remove("O-player", "X-player");
  persLeft.style.transform = "translateX(200%)";
  persRight.style.transform = "translateX(-200%) scale(-1, 1)";
}
function endGame() {
  cells.forEach(function (cell) {
    return cell.classList.add('taken');
  });
}
restartBtn.addEventListener('click', function () {
  isComputerX = !isComputerX;
  initializeGame();
});
cells.forEach(function (cell) {
  return cell.addEventListener('click', handleCellClick);
});
sideBtns.forEach(function (btn) {
  btn.addEventListener('click', function () {
    var side = btn.dataset.side;
    isComputerX = side !== 'X';
    sideBtns.forEach(function (item) {
      return item.classList.remove('_active');
    });
    btn.classList.add('_active');
  });
});
startGame.addEventListener('click', function () {
  document.getElementById('side-selection').style.opacity = '0';
  gameContainer.style.opacity = '1';
  restartBtn.style.display = '';
  landWrapper.classList.add("_decor");
  setTimeout(function () {
    enableMouseScale(document.querySelector('.decor'));
  }, 2500);
  initializeGame();
  hidePopup("#side-selection");
});
function showPopup(popup) {
  popup = overlay.querySelector(popup);
  overlay.classList.remove("opacity");
  popup.classList.remove("hide");
}
function hidePopup(popup) {
  popup = overlay.querySelector(popup);
  overlay.classList.add("opacity");
  popup.classList.add("hide");
}
function enableMouseScale(element) {
  var minScale = 1;
  var maxScale = 1.05;
  element.style.transition = 'transform 0.1s ease';
  document.addEventListener('mousemove', function (e) {
    var rect = element.getBoundingClientRect();
    var x = e.clientX - rect.left;
    var y = e.clientY - rect.top;
    var centerX = rect.width / 2;
    var centerY = rect.height / 2;
    var distance = Math.hypot(x - centerX, y - centerY);
    var maxDistance = Math.hypot(centerX, centerY);
    var scale = minScale + (1 - distance / maxDistance) * (maxScale - minScale);
    element.style.transform = "scale(".concat(Math.min(maxScale, Math.max(minScale, scale)), ")");
  });
  element.addEventListener('mouseleave', function () {
    element.style.transform = "scale(".concat(minScale, ")");
  });
}
function showWinLine(combo) {
  var line = document.querySelector('.win-line');
  line.style.transform = 'scaleX(0)';
  // line.style.width = '100%';
  // line.style.height = '44px';
  // line.style.background = '#00f0ff';

  var positions = {
    '0,1,2': {
      top: '26%',
      left: '50%',
      rotate: '0deg',
      width: '80%'
    },
    '3,4,5': {
      top: '50%',
      left: '50%',
      rotate: '0deg',
      width: '80%'
    },
    '6,7,8': {
      top: '78.33',
      left: '50%',
      rotate: '0deg',
      width: '80%'
    },
    '0,3,6': {
      top: '50%',
      left: '24.5%',
      rotate: '90deg',
      width: '80%'
    },
    '1,4,7': {
      top: '50%',
      left: '50%',
      rotate: '90deg',
      width: '80%'
    },
    '2,5,8': {
      top: '50%',
      left: '76.5%',
      rotate: '90deg',
      width: '80%'
    },
    '0,4,8': {
      top: '50%',
      left: '50%',
      rotate: '45deg',
      width: '100%'
    },
    '2,4,6': {
      top: '50%',
      left: '50%',
      rotate: '-45deg',
      width: '100%'
    }
  };
  var key = combo.sort(function (a, b) {
    return a - b;
  }).join(',');
  var pos = positions[key];
  console.log(pos.width);
  var width = pos.width;
  if (pos) {
    line.style.top = pos.top;
    line.style.left = pos.left;
    line.style.transform = "translate(-50%, -50%) rotate(".concat(pos.rotate, ") scaleX(1)");
    line.style.width = "".concat(pos.width);
    line.style.opacity = "1";
  }
}

// test
var testPopupButtons = document.querySelectorAll('.test-popup');
testPopupButtons.forEach(function (button) {
  button.addEventListener('click', function () {
    var popupClass = button.dataset.popup;
    var popup = overlay.querySelector(popupClass);
    var allPopups = overlay.querySelectorAll('.popup');
    var isAlreadyOpen = !popup.classList.contains('hide');
    if (isAlreadyOpen) {
      overlay.classList.add('opacity');
      popup.classList.add('hide');
    } else {
      allPopups.forEach(function (p) {
        return p.classList.add('hide');
      });
      overlay.classList.remove('opacity');
      popup.classList.remove('hide');
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiY2VsbHMiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJzdGF0dXNUZXh0IiwiZ2V0RWxlbWVudEJ5SWQiLCJzdGF0dXNUZXh0SW5mbyIsInN0YXR1c0NvbnRhaW5lciIsInF1ZXJ5U2VsZWN0b3IiLCJzdGF0dXNCb3giLCJyZXN0YXJ0QnRuIiwib3ZlcmxheSIsInNpZGVCdG5zIiwic3RhcnRHYW1lIiwiZ2FtZUNvbnRhaW5lciIsImxhbmRXcmFwcGVyIiwic3RhdHVzSWNvblgiLCJzdGF0dXNJY29uTyIsImdhbWVHcmlkIiwicGVyc0xlZnQiLCJwZXJzUmlnaHQiLCJib2FyZCIsImlzQ29tcHV0ZXJYIiwiY3VycmVudFBsYXllciIsImNvbXB1dGVyUGxheWVyIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwiYWRkIiwid2lubmluZ0NvbWJvcyIsImluaXRpYWxpemVHYW1lIiwiZm9yRWFjaCIsImNlbGwiLCJ0ZXh0Q29udGVudCIsImxpbmUiLCJzdHlsZSIsInRyYW5zZm9ybSIsImNoZWNrU3RhdHVzSWNvbiIsImNoZWNrU3RhdHVzQ29udGFpbmVyIiwic2V0VGltZW91dCIsImJlc3RNb3ZlIiwicGxheWVyIiwiY2hlY2tXaW5uZXIiLCJjb21ibyIsImV2ZXJ5IiwiaW5kZXgiLCJpc0RyYXciLCJiZXN0U2NvcmUiLCJJbmZpbml0eSIsIm1vdmUiLCJpIiwibGVuZ3RoIiwic2NvcmUiLCJtaW5pbWF4Iiwid2lubmluZ0NvbWJvIiwic2hvd1dpbkxpbmUiLCJzaG93UG9wdXAiLCJlbmRHYW1lIiwiZGVwdGgiLCJpc01heGltaXppbmciLCJNYXRoIiwibWF4IiwibWluIiwiaGFuZGxlQ2VsbENsaWNrIiwiZSIsInRhcmdldCIsImRhdGFzZXQiLCJoaWRlQWZ0ZXJHYW1lIiwib3BhY2l0eSIsImFkZEV2ZW50TGlzdGVuZXIiLCJidG4iLCJzaWRlIiwiaXRlbSIsImRpc3BsYXkiLCJlbmFibGVNb3VzZVNjYWxlIiwiaGlkZVBvcHVwIiwicG9wdXAiLCJlbGVtZW50IiwibWluU2NhbGUiLCJtYXhTY2FsZSIsInRyYW5zaXRpb24iLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwieCIsImNsaWVudFgiLCJsZWZ0IiwieSIsImNsaWVudFkiLCJ0b3AiLCJjZW50ZXJYIiwid2lkdGgiLCJjZW50ZXJZIiwiaGVpZ2h0IiwiZGlzdGFuY2UiLCJoeXBvdCIsIm1heERpc3RhbmNlIiwic2NhbGUiLCJwb3NpdGlvbnMiLCJyb3RhdGUiLCJrZXkiLCJzb3J0IiwiYSIsImIiLCJqb2luIiwicG9zIiwiY29uc29sZSIsImxvZyIsInRlc3RQb3B1cEJ1dHRvbnMiLCJidXR0b24iLCJwb3B1cENsYXNzIiwiYWxsUG9wdXBzIiwiaXNBbHJlYWR5T3BlbiIsImNvbnRhaW5zIiwicCJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFNQSxLQUFLLEdBQUdDLFFBQVEsQ0FBQ0MsZ0JBQWdCLENBQUMsT0FBTyxDQUFDO0FBQ2hELElBQU1DLFVBQVUsR0FBR0YsUUFBUSxDQUFDRyxjQUFjLENBQUMsUUFBUSxDQUFDO0FBQ3BELElBQU1DLGNBQWMsR0FBR0osUUFBUSxDQUFDRyxjQUFjLENBQUMsYUFBYSxDQUFDO0FBQzdELElBQU1FLGVBQWUsR0FBR0wsUUFBUSxDQUFDTSxhQUFhLENBQUMsYUFBYSxDQUFDO0FBQzdELElBQU1DLFNBQVMsR0FBR1AsUUFBUSxDQUFDTSxhQUFhLENBQUMsZUFBZSxDQUFDO0FBQ3pELElBQU1FLFVBQVUsR0FBR1IsUUFBUSxDQUFDRyxjQUFjLENBQUMsU0FBUyxDQUFDO0FBQ3JELElBQU1NLE9BQU8sR0FBR1QsUUFBUSxDQUFDTSxhQUFhLENBQUMsVUFBVSxDQUFDO0FBQ2xELElBQU1JLFFBQVEsR0FBR1YsUUFBUSxDQUFDQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUM7QUFDdkQsSUFBTVUsU0FBUyxHQUFHWCxRQUFRLENBQUNNLGFBQWEsQ0FBQyxhQUFhLENBQUM7QUFDdkQsSUFBTU0sYUFBYSxHQUFHWixRQUFR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Q0FBQ0MsS0FBSyxDQUFDaUMsT0FBTyxNQUFNO0VBQzVCO0FBQ0o7O0FBRUE7QUFDQSxJQUFNdUMsZ0JBQWdCLEdBQUd4RyxRQUFRLENBQUNDLGdCQUFnQixDQUFDLGFBQWEsQ0FBQztBQUNqRXVHLGdCQUFnQixDQUFDNUUsT0FBTyxDQUFDLFVBQUE2RSxNQUFNLEVBQUk7RUFDL0JBLE1BQU0sQ0FBQ3ZDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxZQUFNO0lBQ25DLElBQU13QyxVQUFVLEdBQUdELE1BQU0sQ0FBQzFDLE9BQU8sQ0FBQ1UsS0FBSztJQUN2QyxJQUFNQSxLQUFLLEdBQUdoRSxPQUFPLENBQUNILGFBQWEsQ0FBQ29HLFVBQVUsQ0FBQztJQUMvQyxJQUFNQyxTQUFTLEdBQUdsRyxPQUFPLENBQUNSLGdCQUFnQixDQUFDLFFBQVEsQ0FBQztJQUNwRCxJQUFNMkcsYUFBYSxHQUFHLENBQUNuQyxLQUFLLENBQUNsRCxTQUFTLENBQUNzRixRQUFRLENBQUMsTUFBTSxDQUFDO0lBRXZELElBQUlELGFBQWEsRUFBRTtNQUNmbkcsT0FBTyxDQUFDYyxTQUFTLENBQUNFLEdBQUcsQ0FBQyxTQUFTLENBQUM7TUFDaENnRCxLQUFLLENBQUNsRCxTQUFTLENBQUNFLEdBQUcsQ0FBQyxNQUFNLENBQUM7SUFDL0IsQ0FBQyxNQUFNO01BQ0hrRixTQUFTLENBQUMvRSxPQUFPLENBQUMsVUFBQWtGLENBQUM7UUFBQSxPQUFJQSxDQUFDLENBQUN2RixTQUFTLENBQUNFLEdBQUcsQ0FBQyxNQUFNLENBQUM7TUFBQSxFQUFDO01BQy9DaEIsT0FBTyxDQUFDYyxTQUFTLENBQUNDLE1BQU0sQ0FBQyxTQUFTLENBQUM7TUFDbkNpRCxLQUFLLENBQUNsRCxTQUFTLENBQUNDLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDbEM7RUFDSixDQUFDLENBQUM7QUFDTixDQUFDLENBQUMiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNlbGxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmNlbGwnKTtcbmNvbnN0IHN0YXR1c1RleHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhdHVzJyk7XG5jb25zdCBzdGF0dXNUZXh0SW5mbyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdGF0dXMtdGV4dCcpO1xuY29uc3Qgc3RhdHVzQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5sYW5kX19sZWZ0XCIpO1xuY29uc3Qgc3RhdHVzQm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5sYW5kX19zdGF0dXNcIik7XG5jb25zdCByZXN0YXJ0QnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc3RhcnQnKTtcbmNvbnN0IG92ZXJsYXkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm92ZXJsYXlcIik7XG5jb25zdCBzaWRlQnRucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zaWRlLWJ0bicpO1xuY29uc3Qgc3RhcnRHYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnN0YXJ0LWdhbWUnKTtcbmNvbnN0IGdhbWVDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2FtZScpO1xuY29uc3QgbGFuZFdyYXBwZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubGFuZCcpO1xuY29uc3Qgc3RhdHVzSWNvblggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1wbGF5ZXI9XCJYXCJdJyk7XG5jb25zdCBzdGF0dXNJY29uTyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXBsYXllcj1cIk9cIl0nKTtcbmNvbnN0IGdhbWVHcmlkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmdhbWUtZ3JpZCcpO1xuY29uc3QgcGVyc0xlZnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZ2FtZS1wZXJzLl9sZWZ0Jyk7XG5jb25zdCBwZXJzUmlnaHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZ2FtZS1wZXJzLl9yaWdodCcpO1xuXG5sZXQgYm9hcmQgPSBbJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJ107XG5sZXQgaXNDb21wdXRlclggPSB0cnVlO1xubGV0IGN1cnJlbnRQbGF5ZXIsIGNvbXB1dGVyUGxheWVyO1xuXG5pZiAoaXNDb21wdXRlclgpIHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1zaWRlPVwiWFwiXScpLmNsYXNzTGlzdC5yZW1vdmUoJ19hY3RpdmUnKTtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1zaWRlPVwiMFwiXScpLmNsYXNzTGlzdC5hZGQoJ19hY3RpdmUnKTtcbn0gZWxzZSB7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtc2lkZT1cIjBcIl0nKS5jbGFzc0xpc3QucmVtb3ZlKCdfYWN0aXZlJyk7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtc2lkZT1cIlhcIl0nKS5jbGFzc0xpc3QuYWRkKCdfYWN0aXZlJyk7XG59XG5cbmNvbnN0IHdpbm5pbmdDb21ib3MgPSBbXG4gICAgWzAsIDEsIDJdLFxuICAgIFszLCA0LCA1XSxcbiAgICBbNiwgNywgOF0sXG4gICAgWzAsIDMsIDZdLFxuICAgIFsxLCA0LCA3XSxcbiAgICBbMiwgNSwgOF0sXG4gICAgWzAsIDQsIDhdLFxuICAgIFsyLCA0LCA2XSxcbl07XG5cbmZ1bmN0aW9uIGluaXRpYWxpemVHYW1lKCkge1xuICAgIGN1cnJlbnRQbGF5ZXIgPSBpc0NvbXB1dGVyWCA/ICfQk9GA0LDQstC10YbRjCAwMicgOiAn0JPRgNCw0LLQtdGG0YwgMDEnO1xuICAgIGNvbXB1dGVyUGxheWVyID0gaXNDb21wdXRlclggPyAn0JPRgNCw0LLQtdGG0YwgMDEnIDogJ9CT0YDQsNCy0LXRhtGMIDAyJztcbiAgICBib2FyZCA9IFsnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnXTtcbiAgICBjZWxscy5mb3JFYWNoKGNlbGwgPT4ge1xuICAgICAgICBjZWxsLnRleHRDb250ZW50ID0gJyc7XG4gICAgICAgIGNlbGwuY2xhc3NMaXN0LnJlbW92ZSgndGFrZW4nLCAnWC1wbGF5ZXInLCAnTy1wbGF5ZXInKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IGxpbmUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcud2luLWxpbmUnKTtcbiAgICBpZiAobGluZSkge1xuICAgICAgICBsaW5lLnN0eWxlLnRyYW5zZm9ybSA9ICdzY2FsZVgoMCknO1xuICAgIH1cblxuICAgIGNoZWNrU3RhdHVzSWNvbihjdXJyZW50UGxheWVyKTtcbiAgICBjaGVja1N0YXR1c0NvbnRhaW5lcihjdXJyZW50UGxheWVyKTtcblxuICAgIHN0YXR1c1RleHQudGV4dENvbnRlbnQgPSBgJHtjdXJyZW50UGxheWVyfWA7XG4gICAgc3RhdHVzVGV4dEluZm8udGV4dENvbnRlbnQgPSBg0KLQktCG0Jlf0KXQhtCUYDtcbiAgICBpZiAoY3VycmVudFBsYXllciA9PT0gY29tcHV0ZXJQbGF5ZXIpIHtcbiAgICAgICAgc2V0VGltZW91dChiZXN0TW92ZSwgNTAwKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrU3RhdHVzSWNvbihwbGF5ZXIpIHtcbiAgICBpZiAocGxheWVyID09PSAn0JPRgNCw0LLQtdGG0YwgMDEnKSB7XG4gICAgICAgIHN0YXR1c0ljb25YLmNsYXNzTGlzdC5hZGQoXCJfYWN0aXZlXCIpO1xuICAgICAgICBzdGF0dXNJY29uTy5jbGFzc0xpc3QucmVtb3ZlKFwiX2FjdGl2ZVwiKTtcbiAgICB9XG4gICAgaWYgKHBsYXllciA9PT0gJ9CT0YDQsNCy0LXRhtGMIDAyJykge1xuICAgICAgICBzdGF0dXNJY29uTy5jbGFzc0xpc3QuYWRkKFwiX2FjdGl2ZVwiKTtcbiAgICAgICAgc3RhdHVzSWNvblguY2xhc3NMaXN0LnJlbW92ZShcIl9hY3RpdmVcIik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjaGVja1N0YXR1c0NvbnRhaW5lcihwbGF5ZXIpIHtcbiAgICBpZiAocGxheWVyID09PSAn0JPRgNCw0LLQtdGG0YwgMDEnKSB7XG4gICAgICAgIHN0YXR1c0JveC5jbGFzc0xpc3QuYWRkKFwiWC1wbGF5ZXJcIik7XG4gICAgICAgIHN0YXR1c0JveC5jbGFzc0xpc3QucmVtb3ZlKFwiTy1wbGF5ZXJcIik7XG4gICAgfVxuICAgIGlmIChwbGF5ZXIgPT09ICfQk9GA0LDQstC10YbRjCAwMicpIHtcbiAgICAgICAgc3RhdHVzQm94LmNsYXNzTGlzdC5hZGQoXCJPLXBsYXllclwiKTtcbiAgICAgICAgc3RhdHVzQm94LmNsYXNzTGlzdC5yZW1vdmUoXCJYLXBsYXllclwiKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrV2lubmVyKHBsYXllcikge1xuICAgIGZvciAoY29uc3QgY29tYm8gb2Ygd2lubmluZ0NvbWJvcykge1xuICAgICAgICBpZiAoY29tYm8uZXZlcnkoaW5kZXggPT4gYm9hcmRbaW5kZXhdID09PSBwbGF5ZXIpKSB7XG4gICAgICAgICAgICByZXR1cm4gY29tYm87XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzRHJhdygpIHtcbiAgICByZXR1cm4gYm9hcmQuZXZlcnkoY2VsbCA9PiBjZWxsICE9PSAnJyk7XG59XG5cbmZ1bmN0aW9uIGJlc3RNb3ZlKCkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBsZXQgYmVzdFNjb3JlID0gLUluZmluaXR5O1xuICAgICAgICBsZXQgbW92ZTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJvYXJkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoYm9hcmRbaV0gPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgYm9hcmRbaV0gPSBjb21wdXRlclBsYXllcjtcbiAgICAgICAgICAgICAgICBsZXQgc2NvcmUgPSBtaW5pbWF4KGJvYXJkLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgYm9hcmRbaV0gPSAnJztcbiAgICAgICAgICAgICAgICBpZiAoc2NvcmUgPiBiZXN0U2NvcmUpIHtcbiAgICAgICAgICAgICAgICAgICAgYmVzdFNjb3JlID0gc2NvcmU7XG4gICAgICAgICAgICAgICAgICAgIG1vdmUgPSBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGJvYXJkW21vdmVdID0gY29tcHV0ZXJQbGF5ZXI7XG5cbiAgICAgICAgaWYgKGNvbXB1dGVyUGxheWVyID09PSBcItCT0YDQsNCy0LXRhtGMIDAyXCIpIHtcbiAgICAgICAgICAgIGNlbGxzW21vdmVdLmNsYXNzTGlzdC5hZGQoJ08tcGxheWVyJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbXB1dGVyUGxheWVyID09PSBcItCT0YDQsNCy0LXRhtGMIDAxXCIpIHtcbiAgICAgICAgICAgIGNlbGxzW21vdmVdLmNsYXNzTGlzdC5hZGQoJ1gtcGxheWVyJyk7XG4gICAgICAgIH1cblxuICAgICAgICBjaGVja1N0YXR1c0ljb24oY29tcHV0ZXJQbGF5ZXIpO1xuICAgICAgICBjaGVja1N0YXR1c0NvbnRhaW5lcihjdXJyZW50UGxheWVyKTtcbiAgICAgICAgc3RhdHVzVGV4dEluZm8udGV4dENvbnRlbnQgPSBg0KfQldCa0JDQmWA7XG5cbiAgICAgICAgY2VsbHNbbW92ZV0uY2xhc3NMaXN0LmFkZCgndGFrZW4nKTtcblxuICAgICAgICBjb25zdCB3aW5uaW5nQ29tYm8gPSBjaGVja1dpbm5lcihjb21wdXRlclBsYXllcik7XG4gICAgICAgIGlmICh3aW5uaW5nQ29tYm8pIHtcbiAgICAgICAgICAgIHNob3dXaW5MaW5lKHdpbm5pbmdDb21ibyk7XG4gICAgICAgICAgICBzdGF0dXNUZXh0LnRleHRDb250ZW50ID0gYCR7Y29tcHV0ZXJQbGF5ZXJ9YDtcbiAgICAgICAgICAgIHNob3dQb3B1cChcIi5fbG9zZVwiKTtcbiAgICAgICAgICAgIGVuZEdhbWUoKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0RyYXcoKSkge1xuICAgICAgICAgICAgc2hvd1BvcHVwKFwiLl9kcmF3XCIpO1xuICAgICAgICAgICAgc3RhdHVzVGV4dC50ZXh0Q29udGVudCA9IFwi0J3RltGH0LjRjyFcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRQbGF5ZXIgPSBjdXJyZW50UGxheWVyID09PSAn0JPRgNCw0LLQtdGG0YwgMDEnID8gJ9CT0YDQsNCy0LXRhtGMIDAyJyA6ICfQk9GA0LDQstC10YbRjCAwMSc7XG4gICAgICAgICAgICAgICAgY2hlY2tTdGF0dXNJY29uKGN1cnJlbnRQbGF5ZXIpO1xuICAgICAgICAgICAgICAgIGNoZWNrU3RhdHVzQ29udGFpbmVyKGN1cnJlbnRQbGF5ZXIpO1xuICAgICAgICAgICAgICAgIHN0YXR1c1RleHRJbmZvLnRleHRDb250ZW50ID0gYNCi0JLQhtCZX9Cl0IbQlGA7XG4gICAgICAgICAgICAgICAgc3RhdHVzVGV4dC50ZXh0Q29udGVudCA9IGAke2N1cnJlbnRQbGF5ZXJ9YDtcbiAgICAgICAgICAgIH0sIDE1MDApO1xuICAgICAgICB9XG4gICAgfSwgMTAwMCk7XG59XG5cbmZ1bmN0aW9uIG1pbmltYXgoYm9hcmQsIGRlcHRoLCBpc01heGltaXppbmcpIHtcbiAgICBpZiAoY2hlY2tXaW5uZXIoY29tcHV0ZXJQbGF5ZXIpKSByZXR1cm4gMTAgLSBkZXB0aDtcbiAgICBpZiAoY2hlY2tXaW5uZXIoY3VycmVudFBsYXllcikpIHJldHVybiBkZXB0aCAtIDEwO1xuICAgIGlmIChpc0RyYXcoKSkgcmV0dXJuIDA7XG5cbiAgICBpZiAoaXNNYXhpbWl6aW5nKSB7XG4gICAgICAgIGxldCBiZXN0U2NvcmUgPSAtSW5maW5pdHk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm9hcmQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChib2FyZFtpXSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICBib2FyZFtpXSA9IGNvbXB1dGVyUGxheWVyO1xuICAgICAgICAgICAgICAgIGxldCBzY29yZSA9IG1pbmltYXgoYm9hcmQsIGRlcHRoICsgMSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGJvYXJkW2ldID0gJyc7XG4gICAgICAgICAgICAgICAgYmVzdFNjb3JlID0gTWF0aC5tYXgoc2NvcmUsIGJlc3RTY29yZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJlc3RTY29yZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgYmVzdFNjb3JlID0gSW5maW5pdHk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm9hcmQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChib2FyZFtpXSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICBib2FyZFtpXSA9IGN1cnJlbnRQbGF5ZXI7XG4gICAgICAgICAgICAgICAgbGV0IHNjb3JlID0gbWluaW1heChib2FyZCwgZGVwdGggKyAxLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBib2FyZFtpXSA9ICcnO1xuICAgICAgICAgICAgICAgIGJlc3RTY29yZSA9IE1hdGgubWluKHNjb3JlLCBiZXN0U2NvcmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiZXN0U2NvcmU7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVDZWxsQ2xpY2soZSkge1xuICAgIGNvbnN0IGNlbGwgPSBlLnRhcmdldDtcbiAgICBjb25zdCBpbmRleCA9IGNlbGwuZGF0YXNldC5pbmRleDtcblxuICAgIGlmIChib2FyZFtpbmRleF0gPT09ICcnICYmIGN1cnJlbnRQbGF5ZXIgIT09IGNvbXB1dGVyUGxheWVyKSB7XG4gICAgICAgIGJvYXJkW2luZGV4XSA9IGN1cnJlbnRQbGF5ZXI7XG5cbiAgICAgICAgaWYgKGN1cnJlbnRQbGF5ZXIgPT09IFwi0JPRgNCw0LLQtdGG0YwgMDJcIikge1xuICAgICAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKCdPLXBsYXllcicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50UGxheWVyID09PSBcItCT0YDQsNCy0LXRhtGMIDAxXCIpIHtcbiAgICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgnWC1wbGF5ZXInKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgndGFrZW4nKTtcblxuICAgICAgICBjb25zdCB3aW5uaW5nQ29tYm8gPSBjaGVja1dpbm5lcihjdXJyZW50UGxheWVyKTtcbiAgICAgICAgaWYgKHdpbm5pbmdDb21ibykge1xuICAgICAgICAgICAgc2hvd1dpbkxpbmUod2lubmluZ0NvbWJvKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHN0YXR1c1RleHQudGV4dENvbnRlbnQgPSBgJHtjdXJyZW50UGxheWVyfWA7XG4gICAgICAgICAgICAgICAgaGlkZUFmdGVyR2FtZSgpXG4gICAgICAgICAgICAgICAgLy8gc2hvd1BvcHVwKFwiLl93aW5cIik7XG4gICAgICAgICAgICAgICAgZW5kR2FtZSgpO1xuICAgICAgICAgICAgfSwgMjAwMCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNEcmF3KCkpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGhpZGVBZnRlckdhbWUoKVxuICAgICAgICAgICAgICAgIC8vIHNob3dQb3B1cChcIi5fZHJhd1wiKTtcbiAgICAgICAgICAgICAgICBzdGF0dXNUZXh0LnRleHRDb250ZW50ID0gXCLQndGW0YfQuNGPIVwiO1xuICAgICAgICAgICAgfSwgMjAwMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjdXJyZW50UGxheWVyID0gY29tcHV0ZXJQbGF5ZXI7XG4gICAgICAgICAgICBzdGF0dXNUZXh0LnRleHRDb250ZW50ID0gYCR7Y29tcHV0ZXJQbGF5ZXJ9YDtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoYmVzdE1vdmUsIDUwMCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGhpZGVBZnRlckdhbWUoKXtcbiAgICBnYW1lQ29udGFpbmVyLnN0eWxlLm9wYWNpdHkgPSBcIjBcIjtcbiAgICBnYW1lR3JpZC5zdHlsZS5vcGFjaXR5ID0gXCIwXCI7XG4gICAgc3RhdHVzQm94LmNsYXNzTGlzdC5yZW1vdmUoXCJPLXBsYXllclwiLCBcIlgtcGxheWVyXCIpO1xuICAgIHBlcnNMZWZ0LnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlWCgyMDAlKVwiO1xuICAgIHBlcnNSaWdodC5zdHlsZS50cmFuc2Zvcm0gPSBcInRyYW5zbGF0ZVgoLTIwMCUpIHNjYWxlKC0xLCAxKVwiO1xuXG59XG5cbmZ1bmN0aW9uIGVuZEdhbWUoKSB7XG4gICAgY2VsbHMuZm9yRWFjaChjZWxsID0+IGNlbGwuY2xhc3NMaXN0LmFkZCgndGFrZW4nKSk7XG59XG5cbnJlc3RhcnRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgaXNDb21wdXRlclggPSAhaXNDb21wdXRlclg7XG4gICAgaW5pdGlhbGl6ZUdhbWUoKTtcbn0pO1xuXG5jZWxscy5mb3JFYWNoKGNlbGwgPT4gY2VsbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZUNlbGxDbGljaykpO1xuXG5zaWRlQnRucy5mb3JFYWNoKGJ0biA9PiB7XG4gICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBzaWRlID0gYnRuLmRhdGFzZXQuc2lkZTtcbiAgICAgICAgaXNDb21wdXRlclggPSBzaWRlICE9PSAnWCc7XG4gICAgICAgIHNpZGVCdG5zLmZvckVhY2goaXRlbSA9PiBpdGVtLmNsYXNzTGlzdC5yZW1vdmUoJ19hY3RpdmUnKSk7XG4gICAgICAgIGJ0bi5jbGFzc0xpc3QuYWRkKCdfYWN0aXZlJyk7XG4gICAgfSk7XG59KTtcblxuc3RhcnRHYW1lLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzaWRlLXNlbGVjdGlvbicpLnN0eWxlLm9wYWNpdHkgPSAnMCc7XG4gICAgZ2FtZUNvbnRhaW5lci5zdHlsZS5vcGFjaXR5ID0gJzEnO1xuICAgIHJlc3RhcnRCdG4uc3R5bGUuZGlzcGxheSA9ICcnO1xuICAgIGxhbmRXcmFwcGVyLmNsYXNzTGlzdC5hZGQoXCJfZGVjb3JcIik7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGVuYWJsZU1vdXNlU2NhbGUoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRlY29yJykpO1xuICAgIH0sIDI1MDApO1xuICAgIGluaXRpYWxpemVHYW1lKCk7XG4gICAgaGlkZVBvcHVwKFwiI3NpZGUtc2VsZWN0aW9uXCIpO1xufSk7XG5cbmZ1bmN0aW9uIHNob3dQb3B1cChwb3B1cCkge1xuICAgIHBvcHVwID0gb3ZlcmxheS5xdWVyeVNlbGVjdG9yKHBvcHVwKTtcbiAgICBvdmVybGF5LmNsYXNzTGlzdC5yZW1vdmUoXCJvcGFjaXR5XCIpO1xuICAgIHBvcHVwLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRlXCIpO1xufVxuXG5mdW5jdGlvbiBoaWRlUG9wdXAocG9wdXApIHtcbiAgICBwb3B1cCA9IG92ZXJsYXkucXVlcnlTZWxlY3Rvcihwb3B1cCk7XG4gICAgb3ZlcmxheS5jbGFzc0xpc3QuYWRkKFwib3BhY2l0eVwiKTtcbiAgICBwb3B1cC5jbGFzc0xpc3QuYWRkKFwiaGlkZVwiKTtcbn1cblxuZnVuY3Rpb24gZW5hYmxlTW91c2VTY2FsZShlbGVtZW50KSB7XG4gICAgY29uc3QgbWluU2NhbGUgPSAxO1xuICAgIGNvbnN0IG1heFNjYWxlID0gMS4wNTtcbiAgICBlbGVtZW50LnN0eWxlLnRyYW5zaXRpb24gPSAndHJhbnNmb3JtIDAuMXMgZWFzZSc7XG5cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCAoZSkgPT4ge1xuICAgICAgICBjb25zdCByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgY29uc3QgeCA9IGUuY2xpZW50WCAtIHJlY3QubGVmdDtcbiAgICAgICAgY29uc3QgeSA9IGUuY2xpZW50WSAtIHJlY3QudG9wO1xuICAgICAgICBjb25zdCBjZW50ZXJYID0gcmVjdC53aWR0aCAvIDI7XG4gICAgICAgIGNvbnN0IGNlbnRlclkgPSByZWN0LmhlaWdodCAvIDI7XG4gICAgICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5oeXBvdCh4IC0gY2VudGVyWCwgeSAtIGNlbnRlclkpO1xuICAgICAgICBjb25zdCBtYXhEaXN0YW5jZSA9IE1hdGguaHlwb3QoY2VudGVyWCwgY2VudGVyWSk7XG4gICAgICAgIGNvbnN0IHNjYWxlID0gbWluU2NhbGUgKyAoMSAtIGRpc3RhbmNlIC8gbWF4RGlzdGFuY2UpICogKG1heFNjYWxlIC0gbWluU2NhbGUpO1xuICAgICAgICBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9IGBzY2FsZSgke01hdGgubWluKG1heFNjYWxlLCBNYXRoLm1heChtaW5TY2FsZSwgc2NhbGUpKX0pYDtcbiAgICB9KTtcblxuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsICgpID0+IHtcbiAgICAgICAgZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSBgc2NhbGUoJHttaW5TY2FsZX0pYDtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gc2hvd1dpbkxpbmUoY29tYm8pIHtcbiAgICBjb25zdCBsaW5lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLndpbi1saW5lJyk7XG4gICAgbGluZS5zdHlsZS50cmFuc2Zvcm0gPSAnc2NhbGVYKDApJztcbiAgICAvLyBsaW5lLnN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgIC8vIGxpbmUuc3R5bGUuaGVpZ2h0ID0gJzQ0cHgnO1xuICAgIC8vIGxpbmUuc3R5bGUuYmFja2dyb3VuZCA9ICcjMDBmMGZmJztcblxuICAgIGNvbnN0IHBvc2l0aW9ucyA9IHtcbiAgICAgICAgJzAsMSwyJzogeyB0b3A6ICcyNiUnLCBsZWZ0OiAnNTAlJywgcm90YXRlOiAnMGRlZycsIHdpZHRoOiAnODAlJyB9LFxuICAgICAgICAnMyw0LDUnOiB7IHRvcDogJzUwJScsIGxlZnQ6ICc1MCUnLCByb3RhdGU6ICcwZGVnJywgd2lkdGg6ICc4MCUnIH0sXG4gICAgICAgICc2LDcsOCc6IHsgdG9wOiAnNzguMzMnLCBsZWZ0OiAnNTAlJywgcm90YXRlOiAnMGRlZycsIHdpZHRoOiAnODAlJyB9LFxuICAgICAgICAnMCwzLDYnOiB7IHRvcDogJzUwJScsIGxlZnQ6ICcyNC41JScsIHJvdGF0ZTogJzkwZGVnJywgd2lkdGg6ICc4MCUnfSxcbiAgICAgICAgJzEsNCw3JzogeyB0b3A6ICc1MCUnLCBsZWZ0OiAnNTAlJywgcm90YXRlOiAnOTBkZWcnLCB3aWR0aDogJzgwJScgfSxcbiAgICAgICAgJzIsNSw4JzogeyB0b3A6ICc1MCUnLCBsZWZ0OiAnNzYuNSUnLCByb3RhdGU6ICc5MGRlZycsIHdpZHRoOiAnODAlJyB9LFxuICAgICAgICAnMCw0LDgnOiB7IHRvcDogJzUwJScsIGxlZnQ6ICc1MCUnLCByb3RhdGU6ICc0NWRlZycsIHdpZHRoOiAnMTAwJScgfSxcbiAgICAgICAgJzIsNCw2JzogeyB0b3A6ICc1MCUnLCBsZWZ0OiAnNTAlJywgcm90YXRlOiAnLTQ1ZGVnJywgd2lkdGg6ICcxMDAlJyB9LFxuICAgIH07XG5cbiAgICBjb25zdCBrZXkgPSBjb21iby5zb3J0KChhLCBiKSA9PiBhIC0gYikuam9pbignLCcpO1xuICAgIGNvbnN0IHBvcyA9IHBvc2l0aW9uc1trZXldO1xuXG4gICAgY29uc29sZS5sb2cocG9zLndpZHRoKTtcblxuICAgIGxldCB3aWR0aCA9IHBvcy53aWR0aDtcblxuICAgIGlmIChwb3MpIHtcbiAgICAgICAgbGluZS5zdHlsZS50b3AgPSBwb3MudG9wO1xuICAgICAgICBsaW5lLnN0eWxlLmxlZnQgPSBwb3MubGVmdDtcbiAgICAgICAgbGluZS5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlKC01MCUsIC01MCUpIHJvdGF0ZSgke3Bvcy5yb3RhdGV9KSBzY2FsZVgoMSlgO1xuICAgICAgICBsaW5lLnN0eWxlLndpZHRoID0gYCR7cG9zLndpZHRofWA7XG4gICAgICAgIGxpbmUuc3R5bGUub3BhY2l0eSA9IGAxYDtcbiAgICB9XG59XG5cbi8vIHRlc3RcbmNvbnN0IHRlc3RQb3B1cEJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudGVzdC1wb3B1cCcpO1xudGVzdFBvcHVwQnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PiB7XG4gICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBwb3B1cENsYXNzID0gYnV0dG9uLmRhdGFzZXQucG9wdXA7XG4gICAgICAgIGNvbnN0IHBvcHVwID0gb3ZlcmxheS5xdWVyeVNlbGVjdG9yKHBvcHVwQ2xhc3MpO1xuICAgICAgICBjb25zdCBhbGxQb3B1cHMgPSBvdmVybGF5LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wb3B1cCcpO1xuICAgICAgICBjb25zdCBpc0FscmVhZHlPcGVuID0gIXBvcHVwLmNsYXNzTGlzdC5jb250YWlucygnaGlkZScpO1xuXG4gICAgICAgIGlmIChpc0FscmVhZHlPcGVuKSB7XG4gICAgICAgICAgICBvdmVybGF5LmNsYXNzTGlzdC5hZGQoJ29wYWNpdHknKTtcbiAgICAgICAgICAgIHBvcHVwLmNsYXNzTGlzdC5hZGQoJ2hpZGUnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFsbFBvcHVwcy5mb3JFYWNoKHAgPT4gcC5jbGFzc0xpc3QuYWRkKCdoaWRlJykpO1xuICAgICAgICAgICAgb3ZlcmxheS5jbGFzc0xpc3QucmVtb3ZlKCdvcGFjaXR5Jyk7XG4gICAgICAgICAgICBwb3B1cC5jbGFzc0xpc3QucmVtb3ZlKCdoaWRlJyk7XG4gICAgICAgIH1cbiAgICB9KTtcbn0pO1xuIl19
